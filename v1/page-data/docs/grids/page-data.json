{"componentChunkName":"component---src-templates-documentation-js","path":"/docs/grids","result":{"data":{"allDocs":{"nodes":[{"frontmatter":{"category":"a-z","title":"Accents"},"slug":"accents","id":"cdc74016-37d0-5782-b5dd-387c7ed98390"},{"frontmatter":{"category":"introduction","title":"Accessibility"},"slug":"accessibility","id":"cf91e1fd-b1f8-56ee-91b3-dcb08fd1642d"},{"frontmatter":{"category":"a-z","title":"Accordions"},"slug":"accordions","id":"70212589-1cf9-5245-8c48-739f73a01bc2"},{"frontmatter":{"category":"a-z","title":"Alerts"},"slug":"alerts","id":"824927cb-d605-5ab3-8441-6dba4c663daa"},{"frontmatter":{"category":"a-z","title":"Articles"},"slug":"articles","id":"9400a1a6-2bb0-5b80-b113-7ded5270111a"},{"frontmatter":{"category":"a-z","title":"Aspect Ratios"},"slug":"apect-ratios","id":"9114ba52-80d8-5a09-9c88-1ae7f89b5353"},{"frontmatter":{"category":"a-z","title":"Backdrops"},"slug":"backdrops","id":"6332985e-2952-5e8e-9a85-87785dcf9548"},{"frontmatter":{"category":"a-z","title":"Borders"},"slug":"borders","id":"ae9aff74-9d02-5e20-ac6c-6148684f1d26"},{"frontmatter":{"category":"a-z","title":"Breakpoints"},"slug":"breakpoints","id":"be26710d-fa7e-51f8-b7cc-79eda0b72526"},{"frontmatter":{"category":"a-z","title":"Buttons"},"slug":"buttons","id":"a2632426-9dda-555f-8de6-041f5b562e06"},{"frontmatter":{"category":"a-z","title":"Cards"},"slug":"cards","id":"1ed2bd14-6574-5614-aaeb-d56a77e8bb54"},{"frontmatter":{"category":"a-z","title":"Collapse"},"slug":"collapse","id":"4157209d-4d06-5df9-865a-014bdfdd22ba"},{"frontmatter":{"category":"a-z","title":"Color"},"slug":"color","id":"80968e7c-3bbd-555e-a463-cd1d4b77ea3f"},{"frontmatter":{"category":"a-z","title":"Containers"},"slug":"containers","id":"2833dbdb-0097-59c5-b964-0411e63ed39c"},{"frontmatter":{"category":"introduction","title":"Customization"},"slug":"customization","id":"4f6506d1-772c-5146-8877-f27208736b58"},{"frontmatter":{"category":"a-z","title":"Display"},"slug":"display","id":"4a5f6596-e7c8-526c-9009-8c318cfbe461"},{"frontmatter":{"category":"a-z","title":"Flex"},"slug":"flex","id":"cb55e40b-cc87-5265-b4b1-6b24adb63d0c"},{"frontmatter":{"category":"a-z","title":"Forms"},"slug":"forms","id":"3b3fbdd9-dd05-54a2-8b8e-cb0b523bca0d"},{"frontmatter":{"category":"introduction","title":"Get Started"},"slug":"get-started","id":"951ab3d6-b3a3-5c46-9f22-6172fc8f7e09"},{"frontmatter":{"category":"a-z","title":"Grids"},"slug":"grids","id":"1d388063-2de5-58dc-aa1b-a8a7614dee3e"},{"frontmatter":{"category":"a-z","title":"Modal"},"slug":"modal","id":"f26d432e-f12d-5834-8f14-34c43dcddb2e"},{"frontmatter":{"category":"a-z","title":"Navigation"},"slug":"navigation","id":"573eeb85-bdcc-55f8-8d8d-79d471383360"},{"frontmatter":{"category":"a-z","title":"Opacities"},"slug":"opacities","id":"05cddda0-c669-5dd3-9e35-d89c29ee160b"},{"frontmatter":{"category":"a-z","title":"Overflow"},"slug":"overflow","id":"f6011e59-56c3-5892-8717-bb5dfa0d61f1"},{"frontmatter":{"category":"a-z","title":"Position"},"slug":"position","id":"da834fc6-b5be-56ee-9b0e-7dba096fbd51"},{"frontmatter":{"category":"introduction","title":"RTL"},"slug":"rtl","id":"e5127afe-29f3-5068-92d6-12d09d36ab49"},{"frontmatter":{"category":"a-z","title":"Shadows"},"slug":"shadows","id":"e4094f28-e460-5f11-8544-4f9e2a75804d"},{"frontmatter":{"category":"a-z","title":"Sizing"},"slug":"sizing","id":"a949c067-829a-5be3-8057-37b4e31b491d"},{"frontmatter":{"category":"a-z","title":"Spacing"},"slug":"spacing","id":"0b3b3158-9884-57a8-a5c4-5ae5971ee344"},{"frontmatter":{"category":"a-z","title":"Tables"},"slug":"tables","id":"f7a2ecf4-483e-5f3b-80e4-4f69303916d1"},{"frontmatter":{"category":"a-z","title":"Tabs"},"slug":"tabs","id":"96f2e4c3-dce3-5f48-8e18-d7a83621bc6c"},{"frontmatter":{"category":"a-z","title":"Typography"},"slug":"typography","id":"b042c22c-4d2b-525d-ab1a-5b16a23def19"},{"frontmatter":{"category":"supplemental","title":"Using the Icons"},"slug":"icons-usage","id":"2a198bb2-73ac-51ad-831c-ebd64080fff8"},{"frontmatter":{"category":"a-z","title":"Z index"},"slug":"z-index","id":"aca960a4-66b6-5fd3-8ef9-b4886a04a485"}]},"singleDoc":{"slug":"grids","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"category\": \"a-z\",\n  \"title\": \"Grids\",\n  \"bannerCreditName\": \"Phoenix Han\",\n  \"bannerCreditHandle\": \"@phienix_han\",\n  \"bannerImage\": \"../../images/banner/grids.jpg\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TextBlock = makeShortcode(\"TextBlock\");\nvar Divider = makeShortcode(\"Divider\");\nvar FigureBlock = makeShortcode(\"FigureBlock\");\nvar TableLineDescBlock = makeShortcode(\"TableLineDescBlock\");\nvar TableLineDescRow = makeShortcode(\"TableLineDescRow\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"Build functional, responsive layout patterns. Choose from Natura11y's convenient flexbox grid or the more contemporary CSS Grid component.\")), mdx(Divider, {\n    id: \"matrix-flexbox-grid\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Flexbox Grid\"), mdx(\"p\", null, \"Natura11y offers a 12 column \", mdx(\"a\", {\n    href: \"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox\",\n    target: \"_blank\"\n  }, \"flexbox\"), \" grid system that may be familiar to you. Continue reading to learn about the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Matrix\"), \" component.\")), mdx(MatrixExample, {\n    mdxType: \"MatrixExample\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Matrix Component\"), mdx(\"p\", null, \"The example in Figure 1 shows the HTML needed to get started using the Matrix component.\")), mdx(FigureBlock, {\n    figureNumber: \"1\",\n    visualExample: mdx(MatrixStack, {\n      mdxType: \"MatrixStack\"\n    }),\n    codeExample: \"\\n        <div class=\\\"matrix\\\"> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TableLineDescBlock, {\n    targetFigure: \"1\",\n    mdxType: \"TableLineDescBlock\"\n  }, mdx(TableLineDescRow, {\n    lines: \"1\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix selector\"), \" is required.\")), mdx(TableLineDescRow, {\n    lines: \"3\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix__cell\"), \" selector is required.\"), mdx(\"p\", null, \"Matrix cells inherit the width of their parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix\"), \" and stack on top of one another when a width modifier class is not present.\"), mdx(\"p\", null, \"When a width modifier (specific to a breakpoint) is present, Matrix cells remain stacked until the viewport width reaches that breakpoint.\"))), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Matrix Cell Width\"), mdx(\"p\", null, \"To specify the width of matrix cells, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix--cell-{x}\"), \" modifier class, where \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"x\")), \" equals their desired width (a number from 1 to 12).\"), mdx(\"p\", null, \"For example, to make a three-column matrix using the 12 column grid system, apply \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix--cell-4\"), \" directly to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix\"), \" selector (Figure 2, line 1).\")), mdx(FigureBlock, {\n    figureNumber: \"2\",\n    visualExample: mdx(MatrixCellWidth, {\n      mdxType: \"MatrixCellWidth\"\n    }),\n    codeExample: \"\\n        <div class=\\\"matrix matrix--cell-4\\\"> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix--cell-{x}\"), \" modifier class works on individual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix__cell\"), \" selectors, too.\"), mdx(\"p\", null, \"Bulding from the previous example, we can remove the sixth cell and allow the fifth cell to fill the remaining space. On the fifth \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix__cell\"), \" instance, notice the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix--cell-8\"), \" modifier class (Figure 3, line 19).\")), mdx(FigureBlock, {\n    figureNumber: \"3\",\n    visualExample: mdx(MatrixCellWidthChild, {\n      mdxType: \"MatrixCellWidthChild\"\n    }),\n    highlightedLines: \"1,19\",\n    codeExample: \"\\n        <div class=\\\"matrix matrix--cell-4\\\"> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell matrix--cell-8\\\">\\n                <!-- ... -->\\n            </div> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Fill and Fit\"), mdx(\"p\", null, \"In addition to the 12 width values, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix--cell-fill\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix-cell-fit\"), \" modifier classes are available.\"), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix--cell-fill\"), \" divides the remaining space (width) and fills it. While \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix--cell-fit\"), \" allows the cell's content to determine it's width (Figure 4).\")), mdx(FigureBlock, {\n    figureNumber: \"4\",\n    visualExample: mdx(MatrixFitAndFill, {\n      mdxType: \"MatrixFitAndFill\"\n    }),\n    codeExample: \"\\n        <div class=\\\"matrix matrix--cell-fit\\\">\\n            <!-- ... -->\\n        </div> \\n\\n        <div class=\\\"matrix matrix--cell-fill\\\">\\n            <!-- ... -->\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Breakpoint Modifiers\"), mdx(\"p\", null, \"All \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"matrix cell\"), \" width utilites in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix\"), \" accept \", mdx(\"a\", {\n    href: \"/docs/breakpoints/#breakpointModifiers\"\n  }, \"breakpoint modifiers\"), \".\"), mdx(\"p\", null, \"For responsive layouts, chain a breakpoint modifier (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix--cell-{x}--{y}\"), \" where \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"x\")), \" equals the cell width, and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"y\")), \" specifies the desired breakpoint.\"), mdx(\"p\", null, \"For example, to make a three-column layout at the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"medium\"), \" breakpoint, apply \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix--cell-4--md\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix\"), \" selector (Figure 4, line 1).\")), mdx(FigureBlock, {\n    figureNumber: \"5\",\n    visualExample: mdx(MatrixCellWidthBreakpoints, {\n      mdxType: \"MatrixCellWidthBreakpoints\"\n    }),\n    highlightedLines: \"1\",\n    codeExample: \"\\n        <div class=\\\"matrix matrix--cell-4--md\\\"> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n            <div class=\\\"matrix__cell\\\">\\n                <!-- ... -->\\n            </div> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"css-grid\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"CSS Grid\"), mdx(\"p\", null, \"Natura11y's CSS grid component provides some fundamental grid layout options (via utility classes).\")), mdx(GridExample, {\n    mdxType: \"GridExample\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"Attempting to reproduce the limitless layout options available with CSS Grid Layout would be altogether misguided. You can and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"should\"), \" create grid layouts yourself\\u2014writing custom CSS\\u2014alongside Natura11y's styles.\"), mdx(\"p\", null, \"With that out of the way, let's look at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid\"), \" component beginning with Figure 6.\")), mdx(FigureBlock, {\n    figureNumber: \"6\",\n    visualExample: mdx(GridStack, {\n      mdxType: \"GridStack\"\n    }),\n    highlightedLines: \"1,3-13\",\n    codeExample: \"\\n        <div class=\\\"grid\\\"> \\n\\n            <div>\\n                <p>01</p>\\n            </div> \\n\\n            <div>\\n                <p>02</p>\\n            </div> \\n\\n            <div>\\n                <p>03</p>\\n            </div> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TableLineDescBlock, {\n    targetFigure: \"6\",\n    mdxType: \"TableLineDescBlock\"\n  }, mdx(TableLineDescRow, {\n    lines: \"1\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid\"), \" selector is required.\"), mdx(\"p\", null, \"It applies the css grid specification.\")), mdx(TableLineDescRow, {\n    lines: \"3-13\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"All direct children of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid\"), \" selector are automatically grid items.\"))), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Grid Columns\"), mdx(\"p\", null, \"To create columns within a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid selector\"), \", apply the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--column-{x}\"), \" modifier. Here x equals the actual column count (from 1 to 12). This works in direct contrast with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix\"), \" grid system mentioned above.\"), mdx(\"p\", null, \"As shown is Figure 7 below, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--column-3\"), \" modifier class creates a three column grid.\")), mdx(FigureBlock, {\n    figureNumber: \"7\",\n    visualExample: mdx(GridColumnWidth, {\n      mdxType: \"GridColumnWidth\"\n    }),\n    highlightedLines: \"1\",\n    codeExample: \"\\n        <div class=\\\"grid grid--column-3\\\">\\n            ...\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Column Span\"), mdx(\"p\", null, \"Grid items can span the number of columns defined by their parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--column-{x} modifier\"), \". Include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid__colspan-{x}\"), \" modifier on a grid item. Here \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"x\")), \" equals the column count the grid item will take up (from 2 to 12).\")), mdx(FigureBlock, {\n    figureNumber: \"8\",\n    visualExample: mdx(GridColumnSpan, {\n      mdxType: \"GridColumnSpan\"\n    }),\n    highlightedLines: \"1\",\n    codeExample: \"\\n        <div class=\\\"grid grid--column-4\\\"> \\n\\n            <div class=\\\"grid__colspan-3\\\">\\n                <p>01</p>\\n            </div> \\n\\n            ... \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Grid Rows\"), mdx(\"p\", null, \"With the grid component, rows are implicit. Grid items can span up to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"6\"), \" rows. Apply the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid__rowspan-{x}\"), \" modifier on a grid item. Here \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"x\")), \" equals the row count the grid item will take up (from 2 to 6). See Figure 9, line 3.\")), mdx(FigureBlock, {\n    figureNumber: \"9\",\n    visualExample: mdx(GridRowSpan, {\n      mdxType: \"GridRowSpan\"\n    }),\n    highlightedLines: \"1\",\n    codeExample: \"\\n        <div class=\\\"grid grid--column-2\\\"> \\n\\n            <div class=\\\"grid__rowspan-2\\\">\\n                <p>01</p>\\n            </div> \\n\\n            ... \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Breakpoint Modifiers\"), mdx(\"p\", null, \"All column and row utilites in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid\"), \" accept breakpoint modifiers.\"), mdx(\"p\", null, \"For responsive layouts, chain a breakpoint modifier (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--column-{x}--{y}\"), \" where \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"x\")), \" equals the column count, and y specifies the desired breakpoint.\"), mdx(\"p\", null, \"For example, to make a three-column layout at the medium breakpoint, apply \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--column-3--md\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid selector\"), \" (Figure 10, line 1).\")), mdx(FigureBlock, {\n    figureNumber: \"10\",\n    visualExample: mdx(GridColumnWidthBreakpoints, {\n      mdxType: \"GridColumnWidthBreakpoints\"\n    }),\n    highlightedLines: \"1\",\n    codeExample: \"\\n        <div class=\\\"grid grid--column-3--md\\\">\\n            ...\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Grid Divider Modifier\"), mdx(\"p\", null, \"You can now add horizontal and vertical borders between grid cells! Apply the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--divider\"), \" modifier class to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid\"), \" selectors. Doing so results in the following:\")), mdx(FigureBlock, {\n    figureNumber: \"10\",\n    visualExample: mdx(GridDividers, {\n      mdxType: \"GridDividers\"\n    }),\n    highlightedLines: \"1\",\n    codeExample: \"\\n        <div class=\\\"grid grid--divider grid--column-3\\\">\\n            ...\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"You can specify which axis (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"x\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"y\"), \") has continuous lines. Chain \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--fill-x\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--fill-y\"), \" modifiers to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--divider\"), \". With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--divider--fill-x\"), \" present on the example in Figure 11, the horizontal lines run through.\")), mdx(FigureBlock, {\n    figureNumber: \"11\",\n    visualExample: mdx(GridDividers, {\n      gridDividerClass: \"grid--divider--fill-x\",\n      mdxType: \"GridDividers\"\n    }),\n    highlightedLines: \"1\",\n    codeExample: \"\\n        <div class=\\\"grid grid--divider--fill-x grid--column-3\\\">\\n            ...\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--divider--fill-y\"), \" present on the example in Figure 12, the vertical lines run through.\")), mdx(FigureBlock, {\n    figureNumber: \"12\",\n    visualExample: mdx(GridDividers, {\n      gridDividerClass: \"grid--divider--fill-y\",\n      mdxType: \"GridDividers\"\n    }),\n    highlightedLines: \"1\",\n    codeExample: \"\\n        <div class=\\\"grid grid--divider--fill-y grid--column-3\\\">\\n            ...\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--divider\"), \" modifier class adds borders using psuedo elements on each of its direct children or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"cells\"), \". For this reason, when its child has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overflow: hidden;\"), \" css property applied, such as with \", mdx(\"a\", {\n    href: \"/docs/backdrops\"\n  }, \"backdrops\"), \", for example, that child's border would not appear.\"), mdx(\"p\", null, \"To remedy this, simply nest each child of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid--divider\"), \" in a containing element. You could use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ul>\"), \" tag with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<li>\"), \" children, as shown in Figure 13:\")), mdx(FigureBlock, {\n    figureNumber: \"13\",\n    codeExample: \"\\n        <ul class=\\\"grid grid--divider--fill-x grid--column-3\\\"> \\n\\n            <li>\\n                <div class=\\\"backdrop\\\">\\n                    <!-- ... -->\\n                </div>\\n            </li> \\n\\n            <li>\\n                <div class=\\\"backdrop\\\">\\n                <!-- ... -->\\n                </div>\\n            </li> \\n\\n            <li>\\n                <div class=\\\"backdrop\\\">\\n                <!-- ... -->\\n                </div>\\n            </li> \\n\\n        </ul>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"gap-utilities\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Gap Utilities\"), mdx(\"p\", null, \"Add space between matrix cells and grid items using the same utility class. Apply the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gap-{x}\"), \" utility class to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid\"), \" selectors. Here \", mdx(\"em\", null, mdx(\"strong\", null, \"x\")), \" equals the gap value. The gap value includes the global border width (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gap-border\"), \") and the default \", mdx(\"a\", {\n    href: \"/docs/spacing\"\n  }, \"spacer\"), \" values (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gap-1\"), \");\"), mdx(\"p\", null, \"With the example in Figure 9, both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matrix\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid\"), \" have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".gap-{x}\"), \" applied.\")), mdx(FigureBlock, {\n    figureNumber: \"11\",\n    visualExample: mdx(Gap, {\n      mdxType: \"Gap\"\n    }),\n    highlightedLines: \"1,5\",\n    codeExample: \"\\n        <div class=\\\"matrix gap-1\\\">\\n            ...\\n        </div> \\n\\n        <div class=\\\"grid gap-2\\\">\\n            ...\\n        </div> \\n\\n        <!-- All gap utilities: --> \\n\\n        <div class=\\\"grid gap-border\\\">...</div>\\n        <div class=\\\"grid gap-1\\\">...</div>\\n        <div class=\\\"grid gap-2\\\">...</div>\\n        <div class=\\\"grid gap-3\\\">...</div>\\n        <div class=\\\"grid gap-4\\\">...</div>\\n        <div class=\\\"grid gap-5\\\">...</div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"order-utilities\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Order Utilities\"), mdx(\"p\", null, \"Change the layout \", mdx(\"a\", {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/CSS/order\",\n    target: \"_blank\"\n  }, \"order\"), \" of matrix cells and grid items. \")), mdx(FigureBlock, {\n    figureNumber: \"12\",\n    visualExample: mdx(Order, {\n      mdxType: \"Order\"\n    }),\n    codeExample: \"\\n        <div class=\\\"grid grid--column-3--md theme-light border font-size-md text-align-center\\\"> \\n\\n            <div class=\\\"padding-2 border order-3\\\">\\n                <p>01</p>\\n            </div>\\n            <div class=\\\"padding-2 border\\\">\\n                <p>02</p>\\n            </div>\\n            <div class=\\\"padding-2 border\\\">\\n                <p>03</p>\\n            </div> \\n\\n        </div> \\n\\n        <!-- All order utilities: --> \\n\\n        <div class=\\\"order-1\\\">...</div>\\n        <div class=\\\"order-2\\\">...</div>\\n        <div class=\\\"order-3\\\">...</div>\\n        <div class=\\\"order-4\\\">...</div>\\n        <div class=\\\"order-5\\\">...</div>\\n        <div class=\\\"order-6\\\">...</div>\\n        <div class=\\\"order-7\\\">...</div>\\n        <div class=\\\"order-8\\\">...</div>\\n        <div class=\\\"order-9\\\">...</div>\\n        <div class=\\\"order-10\\\">...</div>\\n        <div class=\\\"order-11\\\">...</div>\\n        <div class=\\\"order-12\\\">...</div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Breakpoint Modifiers\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Order\"), \" utilites accept \", mdx(\"a\", {\n    href: \"/docs/breakpoints/#breakpointModifiers\"\n  }, \"breakpoint modifiers\"), \".\")), mdx(FigureBlock, {\n    figureNumber: \"13\",\n    visualExample: mdx(OrderBreakpoints, {\n      mdxType: \"OrderBreakpoints\"\n    }),\n    codeExample: \"\\n        <!-- With breakpoint modifier --> \\n\\n        <div class=\\\"order-3--lg\\\">...</div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Grids","bannerCreditName":"Phoenix Han","bannerCreditHandle":"@phienix_han","bannerImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/v1/static/b4ef3749ef687767b666b26877b65254/6a9ae/grids.jpg","srcSet":"/v1/static/b4ef3749ef687767b666b26877b65254/b6b6d/grids.jpg 500w,\n/v1/static/b4ef3749ef687767b666b26877b65254/86b00/grids.jpg 1000w,\n/v1/static/b4ef3749ef687767b666b26877b65254/6a9ae/grids.jpg 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/v1/static/b4ef3749ef687767b666b26877b65254/adc72/grids.webp 500w,\n/v1/static/b4ef3749ef687767b666b26877b65254/e05de/grids.webp 1000w,\n/v1/static/b4ef3749ef687767b666b26877b65254/0353e/grids.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":750}}}}},"relatedCPs":{"nodes":[{"customProperties":[{"name":"grid-divider-gap","value":"var(--spacer-3)","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Default total gap size of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"grid divider\"), \" selector\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"grid-divider-border-width","value":"var(--border-width)","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Width of centered border between \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"grid divider\"), \" gap\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"grid-divider-border-x-color","value":"var(--canvas-border)","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Color of centered border along the horizontal axis of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"grid divider\"), \" selector\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"grid-divider-border-y-color","value":"var(--canvas-border)","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Color of centered border along the vertical axis of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"grid--divider\"), \" selector\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}],"type":"Grids","scope":".grid--divider"}]}},"pageContext":{"slug":"grids","title":"Grids"}},"staticQueryHashes":["1129062873","28479125","772789909","903098576"]}