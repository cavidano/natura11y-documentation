{"componentChunkName":"component---src-templates-documentation-js","path":"/docs/buttons","result":{"data":{"allDocs":{"nodes":[{"frontmatter":{"category":"a-z","title":"Accents"},"slug":"accents","id":"cdc74016-37d0-5782-b5dd-387c7ed98390"},{"frontmatter":{"category":"introduction","title":"Accessibility"},"slug":"accessibility","id":"cf91e1fd-b1f8-56ee-91b3-dcb08fd1642d"},{"frontmatter":{"category":"a-z","title":"Accordions"},"slug":"accordions","id":"70212589-1cf9-5245-8c48-739f73a01bc2"},{"frontmatter":{"category":"a-z","title":"Alerts"},"slug":"alerts","id":"824927cb-d605-5ab3-8441-6dba4c663daa"},{"frontmatter":{"category":"a-z","title":"Articles"},"slug":"articles","id":"9400a1a6-2bb0-5b80-b113-7ded5270111a"},{"frontmatter":{"category":"a-z","title":"Aspect Ratios"},"slug":"apect-ratios","id":"9114ba52-80d8-5a09-9c88-1ae7f89b5353"},{"frontmatter":{"category":"a-z","title":"Backdrops"},"slug":"backdrops","id":"6332985e-2952-5e8e-9a85-87785dcf9548"},{"frontmatter":{"category":"a-z","title":"Borders"},"slug":"borders","id":"ae9aff74-9d02-5e20-ac6c-6148684f1d26"},{"frontmatter":{"category":"a-z","title":"Breakpoints"},"slug":"breakpoints","id":"be26710d-fa7e-51f8-b7cc-79eda0b72526"},{"frontmatter":{"category":"a-z","title":"Buttons"},"slug":"buttons","id":"a2632426-9dda-555f-8de6-041f5b562e06"},{"frontmatter":{"category":"a-z","title":"Cards"},"slug":"cards","id":"1ed2bd14-6574-5614-aaeb-d56a77e8bb54"},{"frontmatter":{"category":"a-z","title":"Collapse"},"slug":"collapse","id":"4157209d-4d06-5df9-865a-014bdfdd22ba"},{"frontmatter":{"category":"a-z","title":"Color"},"slug":"color","id":"80968e7c-3bbd-555e-a463-cd1d4b77ea3f"},{"frontmatter":{"category":"a-z","title":"Containers"},"slug":"containers","id":"2833dbdb-0097-59c5-b964-0411e63ed39c"},{"frontmatter":{"category":"introduction","title":"Customization"},"slug":"customization","id":"4f6506d1-772c-5146-8877-f27208736b58"},{"frontmatter":{"category":"a-z","title":"Display"},"slug":"display","id":"4a5f6596-e7c8-526c-9009-8c318cfbe461"},{"frontmatter":{"category":"a-z","title":"Flex"},"slug":"flex","id":"cb55e40b-cc87-5265-b4b1-6b24adb63d0c"},{"frontmatter":{"category":"a-z","title":"Forms"},"slug":"forms","id":"3b3fbdd9-dd05-54a2-8b8e-cb0b523bca0d"},{"frontmatter":{"category":"introduction","title":"Get Started"},"slug":"get-started","id":"951ab3d6-b3a3-5c46-9f22-6172fc8f7e09"},{"frontmatter":{"category":"a-z","title":"Grids"},"slug":"grids","id":"1d388063-2de5-58dc-aa1b-a8a7614dee3e"},{"frontmatter":{"category":"a-z","title":"Modal"},"slug":"modal","id":"f26d432e-f12d-5834-8f14-34c43dcddb2e"},{"frontmatter":{"category":"a-z","title":"Navigation"},"slug":"navigation","id":"573eeb85-bdcc-55f8-8d8d-79d471383360"},{"frontmatter":{"category":"a-z","title":"Opacities"},"slug":"opacities","id":"05cddda0-c669-5dd3-9e35-d89c29ee160b"},{"frontmatter":{"category":"a-z","title":"Overflow"},"slug":"overflow","id":"f6011e59-56c3-5892-8717-bb5dfa0d61f1"},{"frontmatter":{"category":"a-z","title":"Position"},"slug":"position","id":"da834fc6-b5be-56ee-9b0e-7dba096fbd51"},{"frontmatter":{"category":"introduction","title":"RTL"},"slug":"rtl","id":"e5127afe-29f3-5068-92d6-12d09d36ab49"},{"frontmatter":{"category":"a-z","title":"Shadows"},"slug":"shadows","id":"e4094f28-e460-5f11-8544-4f9e2a75804d"},{"frontmatter":{"category":"a-z","title":"Sizing"},"slug":"sizing","id":"a949c067-829a-5be3-8057-37b4e31b491d"},{"frontmatter":{"category":"a-z","title":"Spacing"},"slug":"spacing","id":"0b3b3158-9884-57a8-a5c4-5ae5971ee344"},{"frontmatter":{"category":"a-z","title":"Tables"},"slug":"tables","id":"f7a2ecf4-483e-5f3b-80e4-4f69303916d1"},{"frontmatter":{"category":"a-z","title":"Tabs"},"slug":"tabs","id":"96f2e4c3-dce3-5f48-8e18-d7a83621bc6c"},{"frontmatter":{"category":"a-z","title":"Typography"},"slug":"typography","id":"b042c22c-4d2b-525d-ab1a-5b16a23def19"},{"frontmatter":{"category":"supplemental","title":"Using the Icons"},"slug":"icons-usage","id":"2a198bb2-73ac-51ad-831c-ebd64080fff8"},{"frontmatter":{"category":"a-z","title":"Z index"},"slug":"z-index","id":"aca960a4-66b6-5fd3-8ef9-b4886a04a485"}]},"singleDoc":{"slug":"buttons","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"category\": \"a-z\",\n  \"title\": \"Buttons\",\n  \"bannerCreditName\": \"Karl Anderson\",\n  \"bannerCreditHandle\": \"@karlkiwi90\",\n  \"bannerImage\": \"../../images/banner/buttons.jpg\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TextBlock = makeShortcode(\"TextBlock\");\nvar AccessibilitySpotlight = makeShortcode(\"AccessibilitySpotlight\");\nvar Divider = makeShortcode(\"Divider\");\nvar FigureBlock = makeShortcode(\"FigureBlock\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"Distinct, actionable styles for text and icon buttons.\")), mdx(AccessibilitySpotlight, {\n    mdxType: \"AccessibilitySpotlight\"\n  }, mdx(\"p\", null, \"Like our \", mdx(\"a\", {\n    href: \"/docs/navigation\"\n  }, \"navigation\"), \" links, buttons include visible hover and focus\\nstates for keyboard users.\"), mdx(\"p\", null, \"Icon buttons include \", mdx(\"a\", {\n    href: \"aria labels\"\n  }), \" for screen readers, and visible tooltips for sighted users.\")), mdx(Divider, {\n    id: \"the-button-selector\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"The Button Selector\"), mdx(\"p\", null, \"Buttons within Natura11y require a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" utility class on an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<a>\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<button>\"), \" tag, shown in Figure 1. By default, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" selectors inherit text color and font size from their parent.\"), mdx(\"p\", null, \"The example below is a generic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" selector with no other styles yet applied.\")), mdx(FigureBlock, {\n    figureNumber: \"1\",\n    visualExample: mdx(ButtonSelector, {\n      mdxType: \"ButtonSelector\"\n    }),\n    codeExample: \"\\n        <a class=\\\"button\\\" href=\\\"#1\\\">\\n            Button\\n        </a> \\n\\n        <button class=\\\"button\\\">\\n            Button\\n        </button>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"coloring-buttons\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Coloring Buttons\"), mdx(\"p\", null, \"Add color to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" selector with our \", mdx(\"a\", {\n    href: \"/docs/color/#themeColorUtilities\"\n  }, \"theme color utilities\"), \". These classes apply the button's appropriate text color automatically (Figure 2).\")), mdx(FigureBlock, {\n    figureNumber: \"2\",\n    visualExample: mdx(ColoringButtons, {\n      mdxType: \"ColoringButtons\"\n    }),\n    codeExample: \"\\n        <a class=\\\"button theme-primary\\\" href=\\\"#1\\\">\\n            Button\\n        </a> \\n\\n        <a class=\\\"button theme-secondary\\\" href=\\\"#1\\\">\\n            Button\\n        </a> \\n\\n        <a class=\\\"button theme-dark\\\" href=\\\"#1\\\">\\n            Button\\n        </a>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"full-width-buttons\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Full-width Buttons\"), mdx(\"p\", null, \"For buttons that span the width of their parent, add the .width-100 \", mdx(\"a\", {\n    href: \"/docs/sizing\"\n  }, \"size utility class\"), \" (Figure 3).\"), mdx(\"p\", null, \"Do not use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".display-block\"), \" for full-width buttons. Buttons have a display property of flex (for vertical centering text with icons). Using use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".display-block\"), \" changes the buttons display property from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"block\"), \". This breaks the vertical centering of the icon within the button (See \", mdx(\"a\", {\n    href: \"#text-and-icon-buttons\"\n  }, \"buttons with text and icon\"), \" below).\")), mdx(FigureBlock, {\n    figureNumber: \"3\",\n    visualExample: mdx(FullWidthButton, {\n      mdxType: \"FullWidthButton\"\n    }),\n    codeExample: \"\\n        <a class=\\\"button width-100 theme-primary\\\" href=\\\"#1\\\">\\n            Button\\n        </a>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"outlined-buttons\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Outlined Buttons\"), mdx(\"p\", null, \"Create a button with an outline instead of a fill. Add the outline modifier class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button--outline\"), \" to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" selector. The outline width is a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"2x\"), \" multiple of your theme's body border width.\"), mdx(\"p\", null, \"The outline color inherits the button's text color. You can change the color using our \", mdx(\"a\", {\n    href: \"/docs/color/#text-color-utilities\"\n  }, \"text color utility classes\"), \".\")), mdx(FigureBlock, {\n    figureNumber: \"4\",\n    visualExample: mdx(OutlinedButtons, {\n      mdxType: \"OutlinedButtons\"\n    }),\n    codeExample: \"\\n        <a class=\\\"button button--outline\\\" href=\\\"#1\\\">\\n            Button\\n        </a> \\n\\n        <a class=\\\"button button--outline text-color-link\\\" href=\\\"#1\\\">\\n            Button\\n        </a>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"border-radius\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Button Border Radius\"), mdx(\"p\", null, \"Globally, all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" selectors have a border radius. This value is set with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":root\"), \" scoped CSS Variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--button-border-radius\"), \" (see Figure 5). Learn how to \", mdx(\"a\", {\n    href: \"/docs/customization/#referenceGuideCSSVariables\"\n  }, \"customize CSS Variables\"), \". \")), mdx(FigureBlock, {\n    figureNumber: \"5\",\n    codeLanguage: \"css\",\n    visualExample: mdx(ButtonBorderRadius, {\n      mdxType: \"ButtonBorderRadius\"\n    }),\n    codeExample: \"\\n        /* Globally remove border radius in CSS */ \\n\\n        :root {\\n            --button-border-radius: 0;\\n        }\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"Optionally, use our \", mdx(\"a\", {\n    href: \"/docs/borders/#border-radius-utilities\"\n  }, \"border-radius utility classes\"), \" (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".border-radius-pill\"), \") on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" selectors.\")), mdx(FigureBlock, {\n    figureNumber: \"6\",\n    visualExample: mdx(ButtonBorderRadius, {\n      borderRadiusType: \"pill\",\n      mdxType: \"ButtonBorderRadius\"\n    }),\n    codeExample: \"\\n        <a class=\\\"button theme-primary border-radius-pill\\\" href=\\\"#1\\\">\\n            Button\\n        </a>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"sizing-buttons\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Sizing Buttons\"), mdx(\"p\", null, \"With Natura11y, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" selectors inherit their font size. Padding is set with relative (em) sizes. This allows you to resize multiple buttons at once. Use our \", mdx(\"a\", {\n    href: \"/docs/typography/#font-size-utilities\"\n  }, \"font size\"), \" utility classes, or declare your own CSS values.\"), mdx(\"p\", null, \"The example below applies the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".font-size-sm\"), \" utility class to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ul>\"), \" containing buttons. Each button within this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ul>\"), \" becomes smaller with this single declaration.\")), mdx(FigureBlock, {\n    figureNumber: \"7\",\n    visualExample: mdx(\"ul\", {\n      className: \"nav nav--horizontal justify-content-center font-size-sm\"\n    }, mdx(\"li\", null, mdx(\"a\", {\n      className: \"button theme-primary\",\n      href: \"#1\"\n    }, \"Button\")), mdx(\"li\", null, mdx(\"a\", {\n      className: \"button theme-primary\",\n      href: \"#1\"\n    }, \"Button\")), mdx(\"li\", null, mdx(\"a\", {\n      className: \"button theme-primary\",\n      href: \"#1\"\n    }, \"Button\"))),\n    codeExample: \"\\n        <ul class=\\\"nav nav--horizontal font-size-sm\\\">\\n            <li>\\n                <a class=\\\"button theme-primary\\\" href=\\\"#1\\\">\\n                    Button\\n                </a>\\n            </li>\\n            <li>\\n                <a class=\\\"button theme-primary\\\" href=\\\"#1\\\">\\n                    Button\\n                </a>\\n            </li>\\n            <li>\\n                <a class=\\\"button theme-primary\\\" href=\\\"#1\\\">\\n                    Button\\n                </a>\\n            </li>\\n        </ul>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"text-and-icon-buttons\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Text and Icon Buttons\"), mdx(\"p\", null, \"Add an icon to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" selector with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button--has-icon\"), \" modifier class (Figure 7). Buttons with icons require two child selectors.\"), mdx(\"p\", null, \"The first child is is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<span>\"), \" with its combined \", mdx(\"a\", {\n    href: \"/icons/\"\n  }, \"icon\"), \" classes. The second child is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<span>\"), \" with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button__text\"), \" class. This holds the button's text. Further, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button__text\"), \" selector is our target for underlining the text on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":hover\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":focus\"), \" states. Further still, it provides a small margin to separate the text from the icon.\")), mdx(FigureBlock, {\n    figureNumber: \"8\",\n    visualExample: mdx(TextAndIconButtons, {\n      mdxType: \"TextAndIconButtons\"\n    }),\n    codeExample: \"\\n        <a class=\\\"button button--has-icon theme-primary\\\" href=\\\"#1\\\">\\n            <span class=\\\"icon icon-edit\\\"></span>\\n            <span class=\\\"button__text\\\">Button</span>\\n        </a> \\n\\n        <a class=\\\"button button--has-icon button--outline\\\" href=\\\"#1\\\">\\n            <span class=\\\"icon icon-delete\\\"></span>\\n            <span class=\\\"button__text\\\">Delete</span>\\n        </a>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Dispersing the text and icon\"), mdx(\"p\", null, \"Create a button where the text and icon sit on opposing sides. Add the chain modifier class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--disperse\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button--has-icon\"), \" class. Chained together, the class is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button--has-icon--disperse\"), \". By default, this class makes the button full-width of its parent.\")), mdx(FigureBlock, {\n    figureNumber: \"9\",\n    visualExample: mdx(TextAndIconButtons, {\n      TextAndIconDisperse: true,\n      mdxType: \"TextAndIconButtons\"\n    }),\n    codeExample: \"\\n        <a class=\\\"button button--has-icon--disperse theme-dark\\\" href=\\\"#1\\\">\\n            <span class=\\\"button__text\\\">Button</span>\\n            <span class=\\\"icon icon-arrow-right\\\"></span>\\n        </a>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"icon-only-buttons\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Icon-only Buttons\"), mdx(\"p\", null, \"For icon-only buttons, apply the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button--icon--only\"), \" modifier class to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button\"), \" selector.\"), mdx(\"p\", null, \"Icon-only buttons require a single child selector. A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<span>\"), \" with its combined icon classes (just like the text and icon buttons described above).\")), mdx(FigureBlock, {\n    figureNumber: \"10\",\n    visualExample: mdx(IconOnlyButtons, {\n      mdxType: \"IconOnlyButtons\"\n    }),\n    codeExample: \"\\n        <a class=\\\"button button--icon-only\\\" href=\\\"#1\\\" aria-label=\\\"Home\\\">\\n            <span class=\\\"icon icon-home\\\" aria-hidden=\\\"true\\\"></span>\\n        </a>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"Icon-only buttons are transparent by default. Like our other buttons, color can be applied with \", mdx(\"a\", {\n    href: \"/docs/color-system/#backgroundColorClasses\"\n  }, \"background-color\"), \" and \", mdx(\"a\", {\n    href: \"/docs/color/#text-color-utilities\"\n  }, \"text color\"), \" utility classes.\")), mdx(FigureBlock, {\n    figureNumber: \"11\",\n    visualExample: mdx(IconOnlyButtons, {\n      hasColor: true,\n      mdxType: \"IconOnlyButtons\"\n    }),\n    codeExample: \"\\n        <a class=\\\"button button--icon-only theme-primary\\\" href=\\\"#1\\\" aria-label=\\\"Home\\\">\\n            <span class=\\\"icon icon-home\\\" aria-hidden=\\\"true\\\"></span>\\n        </a>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"Do not use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" attribute to describe the button(on its hover state). Instead apply the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" attribute (see Figure 10). Icon-only buttons with the aria-label attribute offer a custom visible tooltip. The core\\njavascript file (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"natura11y.js\"), \") adds these tooltips to the DOM when the document loads.\")), mdx(Divider, {\n    id: \"the-button-group\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"The Button Group\"), mdx(\"p\", null, \"Need a horizontal list of buttons? You can place mixed button types (text and icon) within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".nav\"), \" \", mdx(\"a\", {\n    href: \"/docs/navigation\"\n  }, \"component\"), \". You would need to include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".nav--horizonal\"), \" modifier class. We designed the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".nav\"), \" component mostly for response text navigation. For legibility and cognitive accessibility, a healthy space is present between each item within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".nav\"), \" component.\"), mdx(\"p\", null, \"This is not always your best option for horizontal buttons. Particularly for grouping icon-only buttons (or mixed icon and text buttons) along the horizontal axis. \"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button-group\"), \" selector aligns buttons horizontally while giving them the same height. The value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--button-icon-size\"), \" determines the height of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button-group\"), \". All buttons within \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".button-group\"), \" stretch to fit this height.\")), mdx(FigureBlock, {\n    figureNumber: \"12\",\n    visualExample: mdx(ButtonGroup, {\n      mdxType: \"ButtonGroup\"\n    }),\n    codeExample: \"\\n        <div class=\\\"button-group\\\">\\n            <a class=\\\"button button--outline\\\" href=\\\"#1\\\">\\n                Sign In  \\n            </a>\\n            <a class=\\\"button button--icon-only\\\" href=\\\"#1\\\" aria-label=\\\"Language\\\">\\n                <span class=\\\"icon icon-language\\\" aria-hidden=\\\"true\\\"></span>\\n            </a>\\n            <a class=\\\"button button--icon-only\\\" href=\\\"#1\\\" aria-label=\\\"Search\\\">\\n                <span class=\\\"icon icon-search\\\" aria-hidden=\\\"true\\\"></span>\\n            </a>\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Buttons","bannerCreditName":"Karl Anderson","bannerCreditHandle":"@karlkiwi90","bannerImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#c8a888","images":{"fallback":{"src":"/v1/static/6ae6643700428bf2a53e1182a56e9d81/6a9ae/buttons.jpg","srcSet":"/v1/static/6ae6643700428bf2a53e1182a56e9d81/b6b6d/buttons.jpg 500w,\n/v1/static/6ae6643700428bf2a53e1182a56e9d81/86b00/buttons.jpg 1000w,\n/v1/static/6ae6643700428bf2a53e1182a56e9d81/6a9ae/buttons.jpg 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/v1/static/6ae6643700428bf2a53e1182a56e9d81/adc72/buttons.webp 500w,\n/v1/static/6ae6643700428bf2a53e1182a56e9d81/e05de/buttons.webp 1000w,\n/v1/static/6ae6643700428bf2a53e1182a56e9d81/0353e/buttons.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":750}}}}},"relatedCPs":{"nodes":[{"customProperties":[{"name":"button-padding-x","value":"1em","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Left and right padding of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"button\"), \" utility class\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"button-padding-y","value":"0.75em","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Top and bottom padding of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"button\"), \" utility class\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"button-font-weight","value":"var(--body-font-weight-bold)","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Weight of text elements within the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"button\"), \" utility class\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"button-text-transform","value":"initial","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Text transform of text elements within the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"button\"), \" utility class\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"button-letter-spacing","value":"normal","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Letter spacing of text elements within the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"button\"), \" utility class\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"button-text-transform","value":"initial","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Text transform value of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"button\"), \" utility class\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"button-border-radius","value":"0.25em","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Default Border radius of all \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"button\"), \" selectors\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"button-outline-border-width","value":"calc( var(--border-width) * 2)","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Border width of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"button outline\"), \" modifier class\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"button-icon-only-size","value":"2.25em","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Width and height of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"button icon only\"), \" modifier class\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}],"type":"Buttons","scope":":root"}]}},"pageContext":{"slug":"buttons","title":"Buttons"}},"staticQueryHashes":["1129062873","28479125","772789909","903098576"]}