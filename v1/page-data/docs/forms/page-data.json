{"componentChunkName":"component---src-templates-documentation-js","path":"/docs/forms","result":{"data":{"allDocs":{"nodes":[{"frontmatter":{"category":"a-z","title":"Accents"},"slug":"accents","id":"cdc74016-37d0-5782-b5dd-387c7ed98390"},{"frontmatter":{"category":"introduction","title":"Accessibility"},"slug":"accessibility","id":"cf91e1fd-b1f8-56ee-91b3-dcb08fd1642d"},{"frontmatter":{"category":"a-z","title":"Accordions"},"slug":"accordions","id":"70212589-1cf9-5245-8c48-739f73a01bc2"},{"frontmatter":{"category":"a-z","title":"Alerts"},"slug":"alerts","id":"824927cb-d605-5ab3-8441-6dba4c663daa"},{"frontmatter":{"category":"a-z","title":"Articles"},"slug":"articles","id":"9400a1a6-2bb0-5b80-b113-7ded5270111a"},{"frontmatter":{"category":"a-z","title":"Aspect Ratios"},"slug":"apect-ratios","id":"9114ba52-80d8-5a09-9c88-1ae7f89b5353"},{"frontmatter":{"category":"a-z","title":"Backdrops"},"slug":"backdrops","id":"6332985e-2952-5e8e-9a85-87785dcf9548"},{"frontmatter":{"category":"a-z","title":"Borders"},"slug":"borders","id":"ae9aff74-9d02-5e20-ac6c-6148684f1d26"},{"frontmatter":{"category":"a-z","title":"Breakpoints"},"slug":"breakpoints","id":"be26710d-fa7e-51f8-b7cc-79eda0b72526"},{"frontmatter":{"category":"a-z","title":"Buttons"},"slug":"buttons","id":"a2632426-9dda-555f-8de6-041f5b562e06"},{"frontmatter":{"category":"a-z","title":"Cards"},"slug":"cards","id":"1ed2bd14-6574-5614-aaeb-d56a77e8bb54"},{"frontmatter":{"category":"a-z","title":"Collapse"},"slug":"collapse","id":"4157209d-4d06-5df9-865a-014bdfdd22ba"},{"frontmatter":{"category":"a-z","title":"Color"},"slug":"color","id":"80968e7c-3bbd-555e-a463-cd1d4b77ea3f"},{"frontmatter":{"category":"a-z","title":"Containers"},"slug":"containers","id":"2833dbdb-0097-59c5-b964-0411e63ed39c"},{"frontmatter":{"category":"introduction","title":"Customization"},"slug":"customization","id":"4f6506d1-772c-5146-8877-f27208736b58"},{"frontmatter":{"category":"a-z","title":"Display"},"slug":"display","id":"4a5f6596-e7c8-526c-9009-8c318cfbe461"},{"frontmatter":{"category":"a-z","title":"Flex"},"slug":"flex","id":"cb55e40b-cc87-5265-b4b1-6b24adb63d0c"},{"frontmatter":{"category":"a-z","title":"Forms"},"slug":"forms","id":"3b3fbdd9-dd05-54a2-8b8e-cb0b523bca0d"},{"frontmatter":{"category":"introduction","title":"Get Started"},"slug":"get-started","id":"951ab3d6-b3a3-5c46-9f22-6172fc8f7e09"},{"frontmatter":{"category":"a-z","title":"Grids"},"slug":"grids","id":"1d388063-2de5-58dc-aa1b-a8a7614dee3e"},{"frontmatter":{"category":"a-z","title":"Modal"},"slug":"modal","id":"f26d432e-f12d-5834-8f14-34c43dcddb2e"},{"frontmatter":{"category":"a-z","title":"Navigation"},"slug":"navigation","id":"573eeb85-bdcc-55f8-8d8d-79d471383360"},{"frontmatter":{"category":"a-z","title":"Opacities"},"slug":"opacities","id":"05cddda0-c669-5dd3-9e35-d89c29ee160b"},{"frontmatter":{"category":"a-z","title":"Overflow"},"slug":"overflow","id":"f6011e59-56c3-5892-8717-bb5dfa0d61f1"},{"frontmatter":{"category":"a-z","title":"Position"},"slug":"position","id":"da834fc6-b5be-56ee-9b0e-7dba096fbd51"},{"frontmatter":{"category":"introduction","title":"RTL"},"slug":"rtl","id":"e5127afe-29f3-5068-92d6-12d09d36ab49"},{"frontmatter":{"category":"a-z","title":"Shadows"},"slug":"shadows","id":"e4094f28-e460-5f11-8544-4f9e2a75804d"},{"frontmatter":{"category":"a-z","title":"Sizing"},"slug":"sizing","id":"a949c067-829a-5be3-8057-37b4e31b491d"},{"frontmatter":{"category":"a-z","title":"Spacing"},"slug":"spacing","id":"0b3b3158-9884-57a8-a5c4-5ae5971ee344"},{"frontmatter":{"category":"a-z","title":"Tables"},"slug":"tables","id":"f7a2ecf4-483e-5f3b-80e4-4f69303916d1"},{"frontmatter":{"category":"a-z","title":"Tabs"},"slug":"tabs","id":"96f2e4c3-dce3-5f48-8e18-d7a83621bc6c"},{"frontmatter":{"category":"a-z","title":"Typography"},"slug":"typography","id":"b042c22c-4d2b-525d-ab1a-5b16a23def19"},{"frontmatter":{"category":"supplemental","title":"Using the Icons"},"slug":"icons-usage","id":"2a198bb2-73ac-51ad-831c-ebd64080fff8"},{"frontmatter":{"category":"a-z","title":"Z index"},"slug":"z-index","id":"aca960a4-66b6-5fd3-8ef9-b4886a04a485"}]},"singleDoc":{"slug":"forms","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"category\": \"a-z\",\n  \"title\": \"Forms\",\n  \"bannerCreditName\": \"vivek kumar\",\n  \"bannerCreditHandle\": \"@vikceo\",\n  \"bannerImage\": \"../../images/banner/forms.jpg\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar TextBlock = makeShortcode(\"TextBlock\");\nvar AccessibilitySpotlight = makeShortcode(\"AccessibilitySpotlight\");\nvar Divider = makeShortcode(\"Divider\");\nvar FigureBlock = makeShortcode(\"FigureBlock\");\nvar TableLineDescBlock = makeShortcode(\"TableLineDescBlock\");\nvar TableLineDescRow = makeShortcode(\"TableLineDescRow\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"Forms are notoriously challenging to style and make accessible. Natura11y provides basic style and behavior for building user friendly, accessible forms. \")), mdx(AccessibilitySpotlight, {\n    mdxType: \"AccessibilitySpotlight\"\n  }, mdx(\"p\", null, \"Form elements include a consistent visible focus for keyboard users.\"), mdx(\"p\", null, \"Include accessible field labels \", mdx(\"a\", {\n    href: \"https://www.w3.org/WAI/tutorials/forms/labels/#associating-labels-implicitly\",\n    target: \"_blank\"\n  }, \"implicitly\"), \" or \", mdx(\"a\", {\n    href: \"https://www.w3.org/WAI/tutorials/forms/labels/#associating-labels-explicitly\",\n    target: \"_blank\"\n  }, \"explicitly\"), \"\\u2014it's up to you.\"), mdx(\"p\", null, \"intuitively mark \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"required\"), \" fields. When doing so, Natura11y adds \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"required\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"data-required\"), \" attributes automatically.\"), mdx(\"p\", null, \"Checkbox and radio groups use semantic \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fieldset\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"legend\"), \" tags. \")), mdx(Divider, {\n    id: \"form-entries\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Form Entries\"), mdx(\"p\", null, \"The form entry parent selector (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry\"), \") wraps each entry within a form. Child elements within form entries vary depending on their input types. Such types include \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"text inputs\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"textareas\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"selects\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"checkboxes\"), \", and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"radios\"), \".\"), mdx(\"p\", null, \"In Figure 1, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry\"), \" selector contains an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input>\"), \" field with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type=\\\"text\\\"\"), \" attribute. \")), mdx(FigureBlock, {\n    figureNumber: \"1\",\n    visualExample: mdx(FormEntry, {\n      mdxType: \"FormEntry\"\n    }),\n    highlightedLines: \"1,3-17,19-21\",\n    codeExample: \"\\n        <div class=\\\"form-entry\\\"> \\n\\n            <label class=\\\"form-entry__field\\\"> \\n\\n                <span class=\\\"form-entry__field__label\\\">\\n                    Form Entry Label\\n                </span> \\n\\n                <span class=\\\"form-entry__field__input\\\">\\n                    <input\\n                        type=\\\"text\\\"\\n                        name=\\\"textInputExample\\\"\\n                        id=\\\"text-input-example\\\"\\n                        aria-describedby=\\\"help-text-input-example\\\">\\n                </span> \\n\\n            </label> \\n\\n            <small class=\\\"form-entry__help\\\" id=\\\"help-text-input-example\\\">\\n                Form entry help text\\n            </small> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TableLineDescBlock, {\n    targetFigure: \"1\",\n    mdxType: \"TableLineDescBlock\"\n  }, mdx(TableLineDescRow, {\n    lines: \"1\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry\"), \" parent selector is required.\"), mdx(\"p\", null, \"It contains each entries elements, including help text and feedback messages.\"), mdx(\"p\", null, \"When more than one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry\"), \" selector is present, spacing between them occurs automatically.\")), mdx(TableLineDescRow, {\n    lines: \"3-17\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field\"), \" child selector is required.\"), mdx(\"p\", null, \"It holds the field's label and input elements.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field__label\"), \" grandchild selector is required.\"), mdx(\"p\", null, \"It holds the actual label text, and required indicator (when present).\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field__input\"), \" grandchild selector is required.\"), mdx(\"p\", null, \"It holds the field's actual input elements.\"), mdx(\"p\", null, \"When using help text, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-describedby\"), \" is present on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"input\"), \" tag for assistive technology. It equals the help text's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" attribute (below).\")), mdx(TableLineDescRow, {\n    lines: \"19-21\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__help\"), \" child selector is not required.\"), mdx(\"p\", null, \"Its id equals its associated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-describedby\"), \" attribute.\"))), mdx(Divider, {\n    id: \"select-element\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Select Element\"), mdx(\"p\", null, \"With the example in Figure 2, the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry\"), \" container holds a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<select>\"), \" element.\")), mdx(FigureBlock, {\n    figureNumber: \"2\",\n    visualExample: mdx(FormEntrySelect, {\n      mdxType: \"FormEntrySelect\"\n    }),\n    highlightedLines: \"5-7,9-21\",\n    codeExample: \"\\n        <div class=\\\"form-entry\\\"> \\n\\n            <label class=\\\"form-entry__field\\\"> \\n\\n                <span class=\\\"form-entry__field__label\\\">\\n                    Form Entry Label\\n                </span> \\n\\n                <span class=\\\"form-entry__field__select\\\">\\n                    <select\\n                        id=\\\"select-example\\\"\\n                        name=\\\"selectExample\\\"\\n                        aria-describedby=\\\"help-select-example\\\">\\n                            <option value=\\\"\\\">Select</option>\\n                            <option value=\\\"Option One\\\">Option One</option>\\n                            <option value=\\\"Option Two\\\">Option Two</option>\\n                            <option value=\\\"Option Three\\\">Option Three</option>\\n                            <option value=\\\"Option Four\\\">Option Four</option>\\n                            <option value=\\\"Option Five\\\">Option Five</option>\\n                    </select>\\n                </span> \\n\\n            </label> \\n\\n            <small class=\\\"form-entry__help\\\" id=\\\"help-select-example\\\">\\n                Form entry help text\\n            </small> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TableLineDescBlock, {\n    targetFigure: \"2\",\n    mdxType: \"TableLineDescBlock\"\n  }, mdx(TableLineDescRow, {\n    lines: \"5-7\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field__label\"), \" grandchild selector is required.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \" attribute equals its associated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<select>\"), \" tags \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \".\")), mdx(TableLineDescRow, {\n    lines: \"9-21\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field__select\"), \" grandchild selector is required.\"), mdx(\"p\", null, \"It holds the actual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<select>\"), \" tag.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<select>\"), \" tag's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" equals its associated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for\"), \" attribute.\"))), mdx(Divider, {\n    id: \"text-area\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Text Area\"), mdx(\"p\", null, \"Following the previous example's pattern, Figure 3 shows the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry\"), \" parent selector with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<textarea>\"), \" element.\")), mdx(FigureBlock, {\n    figureNumber: \"3\",\n    visualExample: mdx(FormEntryTextarea, {\n      mdxType: \"FormEntryTextarea\"\n    }),\n    highlightedLines: \"11,13-15,17-22,24-27\",\n    codeExample: \"\\n        <div class=\\\"form-entry\\\"> \\n\\n            <label class=\\\"form-entry__field\\\"> \\n\\n                <span class=\\\"form-entry__field__label\\\">\\n                    Form Entry Label\\n                </span> \\n\\n                <span class=\\\"form-entry__field__input\\\">\\n                    <textarea\\n                        rows=\\\"8\\\"\\n                        name=\\\"textInputExample\\\"\\n                        id=\\\"text-input-example\\\"\\n                        aria-describedby=\\\"help-textarea-example\\\"\\n                    ></textarea>\\n                </span> \\n\\n            </label> \\n\\n            <small class=\\\"form-entry__help\\\" id=\\\"help-textarea-example\\\">\\n                Form entry help text\\n            </small> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TableLineDescBlock, {\n    targetFigure: \"3\",\n    mdxType: \"TableLineDescBlock\"\n  }, mdx(TableLineDescRow, {\n    lines: \"5-7\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field__label\"), \" grandchild selector is required.\")), mdx(TableLineDescRow, {\n    lines: \"9-16\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field__input\"), \" grandchild selector is required.\"), mdx(\"p\", null, \"It holds the actual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<textarea>\"), \" tag.\"))), mdx(Divider, {\n    id: \"file-uploads\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"File Upload\"), mdx(\"p\", null, \"Natura11y offers a simple file upload component, as shown in Figure 4 below.\")), mdx(FigureBlock, {\n    figureNumber: \"4\",\n    visualExample: mdx(FormEntryFileUpload, {\n      mdxType: \"FormEntryFileUpload\"\n    }),\n    highlightedLines: \"11,13-15,17-22,24-27\",\n    codeExample: \"\\n        <div class=\\\"form-entry\\\"> \\n\\n            <div class=\\\"form-entry__field\\\"> \\n\\n                <span class=\\\"form-entry__field__label\\\">\\n                    Upload a Single File\\n                </span> \\n\\n                <div class=\\\"form-entry__field__input\\\"> \\n\\n                    <label class=\\\"file-uploads\\n                        <span class=\\\"file-uploadsp\\\">\\n                            <span class=\\\"file-uploadsp__text\\\">Drag and Drop</span>\\n                        </span> \\n\\n                        <input\\n                            class=\\\"file-uploadsut\\\"\\n                            type=\\\"file\\\"\\n                            name=\\\"fileUploadExample\\\"\\n                            id=\\\"file-uploadsple\\\"\\n                            accept=\\\"image/*\\\" /> \\n\\n                        <span class=\\\"button button--outline button--has-icon file-uploadston\\\">\\n                            <span class=\\\"icon icon-upload\\\"></span>\\n                            <span class=\\\"button__text\\\">Browse for a File</span>\\n                        </span> \\n\\n                    </label> \\n\\n                </div> \\n\\n            </div> \\n\\n            <small class=\\\"form-entry__help\\\" id=\\\"help-file-uploadsple\\\">\\n                Form entry help text\\n            </small> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"checkboxes\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Checkboxes\"), mdx(\"p\", null, \"Checkbox (and radio) groups use semantic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<fieldset>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<legend>\"), \" tags. They stack vertically, with a healthy amount of padding. This helps to ensure an accessible target size.\"), mdx(\"p\", null, \"Figure 5 provides the markup required to create a checkbox group.\")), mdx(FigureBlock, {\n    figureNumber: \"5\",\n    visualExample: mdx(Checkboxes, {\n      mdxType: \"Checkboxes\"\n    }),\n    highlightedLines: \"9,11,18-20\",\n    codeExample: \"\\n        <div class=\\\"form-entry\\\"> \\n\\n            <fieldset class=\\\"form-entry__field\\\"> \\n\\n                <legend class=\\\"form-entry__field__label\\\">\\n                    Form Entry Label\\n                </legend> \\n\\n                <div class=\\\"form-entry__option\\\"> \\n\\n                    <div class=\\\"form-entry__option__check\\\">\\n                        <label>\\n                            <input\\n                                type=\\\"checkbox\\\"\\n                                name=\\\"checkboxGroupExample\\\"\\n                                id=\\\"check-option-one\\\"\\n                                value=\\\"optionOne\\\">\\n                                <span class=\\\"option__label\\\">\\n                                    Option One\\n                                </span>\\n                        </label>\\n                    </div> \\n\\n                    <div class=\\\"form-entry__option__check\\\">\\n                        <label>\\n                            <input\\n                                type=\\\"checkbox\\\"\\n                                name=\\\"checkboxGroupExample\\\"\\n                                id=\\\"check-option-two\\\"\\n                                value=\\\"optionTwo\\\">\\n                                <span class=\\\"option__label\\\">\\n                                    Option Two\\n                                </span>\\n                        </label>\\n                    </div> \\n\\n                    <div class=\\\"form-entry__option__check\\\">\\n                        <label>\\n                            <input\\n                                type=\\\"checkbox\\\"\\n                                name=\\\"checkboxGroupExample\\\"\\n                                id=\\\"check-option-three\\\"\\n                                value=\\\"optionThree\\\">\\n                                <span class=\\\"option__label\\\">\\n                                    Option Three\\n                                </span>\\n                        </label>\\n                    </div> \\n\\n                </div> \\n\\n            </fieldset> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TableLineDescBlock, {\n    targetFigure: \"5\",\n    mdxType: \"TableLineDescBlock\"\n  }, mdx(TableLineDescRow, {\n    lines: \"9\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__option\"), \" child selector is required.\"), mdx(\"p\", null, \"It holds the options markup for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<fieldset>\"), \".\")), mdx(TableLineDescRow, {\n    lines: \"11\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__option__check\"), \" grandchild selector is required.\"), mdx(\"p\", null, \"It holds the actual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<label>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input>\"), \" tags.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__option__check\"), \" selector is repeatable for multiple options.\")), mdx(TableLineDescRow, {\n    lines: \"17-22\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".file-uploadsut\"), \" child selector is required.\"), mdx(\"p\", null, \"It includes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type=\\\"file\\\"\"), \" attribute.\")), mdx(TableLineDescRow, {\n    lines: \"18-20\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".option__label\"), \" child selector is required.\"), mdx(\"p\", null, \"It holds the actual text label for the checkbox.\"))), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Single Checkbox\"), mdx(\"p\", null, \"For a single checkbox, do not use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<fieldset>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<legend>\"), \". Instead, provide an id on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field__label\"), \" selector (Figure 6, line 5). Then associate it with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-labeledby\"), \" placed on the surrounding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<label>\"), \" tag (Figure 6, lines 13).\")), mdx(FigureBlock, {\n    figureNumber: \"6\",\n    visualExample: mdx(CheckboxSingle, {\n      mdxType: \"CheckboxSingle\"\n    }),\n    highlightedLines: \"5,13\",\n    codeExample: \"\\n        <div class=\\\"form-entry\\\"> \\n\\n            <div class=\\\"form-entry__field\\\"> \\n\\n                <span class=\\\"form-entry__field__label\\\" id=\\\"single-option-label\\\">\\n                    Form Entry Label\\n                </span> \\n\\n                <div class=\\\"form-entry__option\\\"> \\n\\n                    <div class=\\\"form-entry__option__check\\\"> \\n\\n                        <label aria-labeledby=\\\"single-option-label\\\">\\n                            <input\\n                                type=\\\"checkbox\\\"\\n                                name=\\\"singleOption\\\"\\n                                id=\\\"single-option\\\"\\n                                value=\\\"option\\\">\\n                                <span class=\\\"option__label\\\">\\n                                    Option\\n                                </span>\\n                        </label> \\n\\n                    </div> \\n\\n                </div> \\n\\n            </div> \\n\\n        </div> \\n\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h3\", null, \"Checkbox Switch\"), mdx(\"p\", null, \"Checkboxes can transform into switches with just a couple of of changes to the markup.\"), mdx(\"p\", null, \"First, change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__option__check\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__option__switch\"), \" (Figure 7, line 11). Then, above the switch label, add an empty \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<span>\"), \" with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".switch__slider\"), \" class (Figure 7, line 19).\")), mdx(FigureBlock, {\n    figureNumber: \"7\",\n    visualExample: mdx(CheckboxSwitch, {\n      mdxType: \"CheckboxSwitch\"\n    }),\n    highlightedLines: \"11,19\",\n    codeExample: \"\\n        <div class=\\\"form-entry\\\"> \\n\\n            <div class=\\\"form-entry__field\\\"> \\n\\n                <span class=\\\"form-entry__field__label\\\" id=\\\"switch-option-label\\\">\\n                    Form Entry Label\\n                </span> \\n\\n                <div class=\\\"form-entry__option\\\"> \\n\\n                    <div class=\\\"form-entry__option__switch\\\"> \\n\\n                        <label aria-labeledby=\\\"switch-option-label\\\">\\n                            <input\\n                                type=\\\"checkbox\\\"\\n                                name=\\\"singleOption\\\"\\n                                id=\\\"switch-option\\\"\\n                                value=\\\"option\\\">\\n                                <span class=\\\"switch__slider\\\"></span>\\n                                <span class=\\\"option__label\\\">\\n                                    Recieve Notifications\\n                                </span>\\n                        </label> \\n\\n                    </div> \\n\\n                </div> \\n\\n            </div> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"radios\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Radios\"), mdx(\"p\", null, \"Like checkboxes, radio groups use semantic \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<fieldset>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<legend>\"), \" tags.\")), mdx(FigureBlock, {\n    figureNumber: \"8\",\n    visualExample: mdx(Radios, {\n      mdxType: \"Radios\"\n    }),\n    highlightedLines: \"9,11,18-20\",\n    codeExample: \"\\n        <div class=\\\"form-entry\\\"> \\n\\n            <fieldset class=\\\"form-entry__field\\\"> \\n\\n                <legend class=\\\"form-entry__field__label\\\">\\n                    Form Entry Label\\n                </legend> \\n\\n                <div class=\\\"form-entry__option\\\"> \\n\\n                    <div class=\\\"form-entry__option__radio\\\">\\n                        <label>\\n                            <input\\n                                type=\\\"radio\\\"\\n                                name=\\\"radioGroupExample\\\"\\n                                id=\\\"radio-option-one\\\"\\n                                value=\\\"optionOne\\\">\\n                                <span class=\\\"option__label\\\">\\n                                    Option One\\n                                </span>\\n                        </label>\\n                    </div> \\n\\n                    <div class=\\\"form-entry__option__radio\\\">\\n                        <label>\\n                            <input\\n                                type=\\\"radio\\\"\\n                                name=\\\"radioGroupExample\\\"\\n                                id=\\\"radio-option-two\\\"\\n                                value=\\\"optionTwo\\\">\\n                                <span class=\\\"option__label\\\">\\n                                    Option Two\\n                                </span>\\n                        </label>\\n                    </div> \\n\\n                    <div class=\\\"form-entry__option__radio\\\">\\n                        <label>\\n                            <input\\n                                type=\\\"radio\\\"\\n                                name=\\\"radioGroupExample\\\"\\n                                id=\\\"radio-option-three\\\"\\n                                value=\\\"optionThree\\\">\\n                                <span class=\\\"option__label\\\">\\n                                    Option Three\\n                                </span>\\n                        </label>\\n                    </div> \\n\\n                </div> \\n\\n            </fieldset> \\n\\n        </div> \\n\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TableLineDescBlock, {\n    targetFigure: \"8\",\n    mdxType: \"TableLineDescBlock\"\n  }, mdx(TableLineDescRow, {\n    lines: \"9\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__option\"), \" child selector is required.\"), mdx(\"p\", null, \"It holds each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__option__radio\"), \" grandchild selector.\")), mdx(TableLineDescRow, {\n    lines: \"11\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__option__radio\"), \" grandchild selector is required.\"), mdx(\"p\", null, \"It holds the actual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<label>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input>\"), \" tags.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__option__radio\"), \" selector is repeatable for multiple options.\")), mdx(TableLineDescRow, {\n    lines: \"17-22\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".file-uploadsut\"), \" child selector is required.\"), mdx(\"p\", null, \"It includes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type=\\\"file\\\"\"), \" attribute.\")), mdx(TableLineDescRow, {\n    lines: \"18-20\",\n    mdxType: \"TableLineDescRow\"\n  }, mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".option__label\"), \" child selector is required.\"), mdx(\"p\", null, \"It holds the actual text label for the checkbox.\"))), mdx(Divider, {\n    id: \"required-fields\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Required Fields\"), mdx(\"p\", null, \"Natura11y makes it easy to mark required fields. Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-required=\\\"true\\\"\"), \" to the parent \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-group\"), \" element of the required field. On the same \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-group\"), \" element, include a custom error message using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-error-message={x}\"), \" attribute. Here \", mdx(\"strong\", null, mdx(\"em\", null, \"x\")), \" equals the message displayed to the user during the validation process. \")), mdx(FigureBlock, {\n    figureNumber: \"9\",\n    visualExample: mdx(RequiredFields, {\n      mdxType: \"RequiredFields\"\n    }),\n    highlightedLines: \"3-4\",\n    codeExample: \"\\n        <div\\n            class=\\\"form-entry\\\"\\n            data-required=\\\"true\\\"\\n            data-error-message=\\\"Custom error message\\\"> \\n\\n            <div class=\\\"form-entry__field\\\">\\n                ...\\n            </div> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"p\", null, \"The two data attributes mentioned above are shown in Figure 9, lines 3 and 4. When present on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form group\"), \" selector, Naturally's Javascript adds the necessary \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"required\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-required\"), \" attributes to the form entry's child \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&lt;input&gt;\"), \" element automatically.\"), mdx(\"p\", null, \"With the previous example, notice the red asterisk placed \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"before\"), \" the label. This too, is added automatically to required fields (via Natura11y's CSS file). The asterisk has become the standard identifier for required fields.   \")), mdx(Divider, {\n    id: \"form-validation\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Form Validation\"), mdx(\"p\", null, \"Natura11y provides superficial client-side form validation. Include the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"novalidate\"), \" attribute on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<form>\"), \" tag. \")), mdx(FigureBlock, {\n    figureNumber: \"10\",\n    visualExample: mdx(FormValidation, {\n      mdxType: \"FormValidation\"\n    }),\n    codeExample: \"\\n        <div\\n            class=\\\"form-entry\\\"\\n            data-required=\\\"true\\\"\\n            data-error-message=\\\"Username is required!\\\"> \\n\\n            <label class=\\\"form-entry__field form-entry__field--float\\\"> \\n\\n                <span class=\\\"form-entry__field__label\\\">\\n                    Username\\n                </span> \\n\\n                <span class=\\\"form-entry__field__input\\\">\\n                    <input type=\\\"text\\\" id=\\\"account-username\\\" name=\\\"accountUsername\\\">\\n                </span> \\n\\n            </label> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }), mdx(Divider, {\n    id: \"floating-labels\",\n    mdxType: \"Divider\"\n  }), mdx(TextBlock, {\n    mdxType: \"TextBlock\"\n  }, mdx(\"h2\", null, \"Floating Labels\"), mdx(\"p\", null, \"For short forms (such as a sign in form) floating labels would be fine to use. Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field--float\"), \" modifier class to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-entry__field\"), \" selector (see Figure 11, line 6).   \")), mdx(FigureBlock, {\n    figureNumber: \"11\",\n    visualExample: mdx(FloatingLabels, {\n      mdxType: \"FloatingLabels\"\n    }),\n    highlightedLines: \"6\",\n    codeExample: \"\\n        <div\\n            class=\\\"form-entry\\\"\\n            data-required=\\\"true\\\"\\n            data-error-message=\\\"Username is required!\\\"> \\n\\n            <label class=\\\"form-entry__field form-entry__field--float\\\"> \\n\\n                <span class=\\\"form-entry__field__label\\\">\\n                    Username\\n                </span> \\n\\n                <span class=\\\"form-entry__field__input\\\">\\n                    <input type=\\\"text\\\" id=\\\"account-username\\\" name=\\\"accountUsername\\\">\\n                </span> \\n\\n            </label> \\n\\n        </div>\\n    \",\n    mdxType: \"FigureBlock\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Forms","bannerCreditName":"vivek kumar","bannerCreditHandle":"@vikceo","bannerImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8b8b8","images":{"fallback":{"src":"/v1/static/119988c757f01fb6bed4628ebb5fac18/6a9ae/forms.jpg","srcSet":"/v1/static/119988c757f01fb6bed4628ebb5fac18/b6b6d/forms.jpg 500w,\n/v1/static/119988c757f01fb6bed4628ebb5fac18/86b00/forms.jpg 1000w,\n/v1/static/119988c757f01fb6bed4628ebb5fac18/6a9ae/forms.jpg 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/v1/static/119988c757f01fb6bed4628ebb5fac18/adc72/forms.webp 500w,\n/v1/static/119988c757f01fb6bed4628ebb5fac18/e05de/forms.webp 1000w,\n/v1/static/119988c757f01fb6bed4628ebb5fac18/0353e/forms.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":750}}}}},"relatedCPs":{"nodes":[{"customProperties":[{"name":"form-field-padding-x","value":"var(--spacer-3)","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Left and right padding of certain \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"form entry\"), \" elements\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"form-field-padding-y","value":"var(--button-padding-y)","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Top and bottom padding of certain \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"form entry\"), \" elements\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},{"name":"form-field-border-radius","value":"0.25em","description":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Maximum width of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"medium\"), \" utility class\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}],"type":"Forms","scope":":root"}]}},"pageContext":{"slug":"forms","title":"Forms"}},"staticQueryHashes":["1129062873","28479125","772789909","903098576"]}